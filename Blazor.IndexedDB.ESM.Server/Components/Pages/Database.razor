@page "/indexed-db-database"

@using Blazor.IndexedDB.ESM.Models.JS
@using Blazor.IndexedDB.ESM.Models.Query
@using Blazor.IndexedDB.ESM.Models.Record
@using Blazor.IndexedDB.ESM.Server.Models
@using Blazor.IndexedDB.ESM.Models
@using System.Text.Json
@inject IndexedDBManager DbManager
@inject IDialogService DialogService
<div>
    <Notifications DbManager="DbManager" />
    <MudStack Row="true" Class="pa-2 ma-2" Justify="Justify.SpaceBetween">
        <MudSelect Class="flex-grow-0" T="IndexedDBDatabase" Value="SelectedDatabase" ValueChanged="SelectedDatabaseChanged" Label="Database" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
            @foreach (var db in DbManager.ManagerConfig.Databases)
            {
                <MudSelectItem Value="db">@db.Name</MudSelectItem>
            }
        </MudSelect>
        <MudSelect Class="flex-grow-0" Disabled="SelectedDatabase==null" T="IndexedDBStoreSchema" Value="SelectedStore" ValueChanged="SelectedStoreChanged" Label="Store(Table)" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
            @foreach (var store in SelectedDatabase?.Stores ?? [])
            {
                <MudSelectItem Value="store">@store.Name</MudSelectItem>
            }
        </MudSelect>
        <MudButton OnClick="OpenDatabaseAsync" Variant="Variant.Outlined">Open Database</MudButton>
        <MudButton Disabled="SelectedStore == null" OnClick="ClearStore" Variant="Variant.Outlined">Clear Store</MudButton>
        <MudButton Disabled="SelectedDatabase == null || SelectedStore == null" OnClick="GenerateData" Variant="Variant.Outlined">Generate Data</MudButton>
    </MudStack>

</div>
@code {
    // [Inject]
    // public required IndexedDBDatabase DbStore { get; set; }
    // @inject DbStore DbStore


    IndexedDBDatabase? SelectedDatabase { get; set; }
    IndexedDBStoreSchema? SelectedStore { get; set; }

    void SelectedDatabaseChanged(IndexedDBDatabase selected)
    {
        if (selected != SelectedDatabase)
        {
            SelectedStore = null;

        }
        SelectedDatabase = selected;
    }

    void SelectedStoreChanged(IndexedDBStoreSchema selected)
    {
        SelectedStore = selected;
    }



    async Task GenerateData()
    {
        if (SelectedDatabase == null || SelectedStore == null)
        {
            return;
        }
        if (SelectedStore.Name == "Employees")
        {
            var num = Random.Shared.Next(100, 200);
            for (var i = 0; i < num; i++)
            {
                await DbManager.AddRecord<Person>(new IndexedDBRecord<Person>
                    {
                        DatabaseName = SelectedDatabase.Name,
                        StoreName = SelectedStore.Name,
                        Data = new()
                    }.ToAction());
            }
        }
        else
        {
            var num = Random.Shared.Next(100, 200);
            for (var i = 0; i < num; i++)
            {
                await DbManager.AddRecord<Vehicle>(new IndexedDBRecord<Vehicle>
                    {
                        DatabaseName = SelectedDatabase.Name,
                        StoreName = SelectedStore.Name,
                        Data = new()
                    }.ToAction());
            }
        }
    }


    string NewStoreName { get; set; } = "";
    List<string> Indexes { get; set; } = new();
    bool GetAll { get; set; }



    protected async Task OpenDatabaseAsync()
    {
        if (SelectedDatabase == null)
        {
            return;
        }
        await DbManager.OpenDb(SelectedDatabase);
        await DbManager.GetDatabaseInfo(SelectedDatabase);
        StateHasChanged();
    }




    protected async Task ClearStore()
    {
        if (SelectedDatabase == null || SelectedStore == null)
        {
            return;
        }
        await DbManager.ClearStore(new() { DatabaseName = SelectedDatabase.Name, StoreName = SelectedStore.Name });
    }
}
