var I=(s,e)=>e.some(t=>s instanceof t),N,S;function k(){return N||(N=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction])}function O(){return S||(S=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])}var p=new WeakMap,f=new WeakMap,g=new WeakMap;function j(s){let e=new Promise((t,r)=>{let n=()=>{s.removeEventListener("success",o),s.removeEventListener("error",i)},o=()=>{t(l(s.result)),n()},i=()=>{r(s.error),n()};s.addEventListener("success",o),s.addEventListener("error",i)});return g.set(e,s),e}function K(s){if(p.has(s))return;let e=new Promise((t,r)=>{let n=()=>{s.removeEventListener("complete",o),s.removeEventListener("error",i),s.removeEventListener("abort",i)},o=()=>{t(),n()},i=()=>{r(s.error||new DOMException("AbortError","AbortError")),n()};s.addEventListener("complete",o),s.addEventListener("error",i),s.addEventListener("abort",i)});p.set(s,e)}var R={get(s,e,t){if(s instanceof IDBTransaction){if(e==="done")return p.get(s);if(e==="store")return t.objectStoreNames[1]?void 0:t.objectStore(t.objectStoreNames[0])}return l(s[e])},set(s,e,t){return s[e]=t,!0},has(s,e){return s instanceof IDBTransaction&&(e==="done"||e==="store")?!0:e in s}};function C(s){R=s(R)}function A(s){return O().includes(s)?function(...e){return s.apply(x(this),e),l(this.request)}:function(...e){return l(s.apply(x(this),e))}}function M(s){return typeof s=="function"?A(s):(s instanceof IDBTransaction&&K(s),I(s,k())?new Proxy(s,R):s)}function l(s){if(s instanceof IDBRequest)return j(s);if(f.has(s))return f.get(s);let e=M(s);return e!==s&&(f.set(s,e),g.set(e,s)),e}var x=s=>g.get(s);function $(s,e,{blocked:t,upgrade:r,blocking:n,terminated:o}={}){let i=indexedDB.open(s,e),u=l(i);return r&&i.addEventListener("upgradeneeded",a=>{r(l(i.result),a.oldVersion,a.newVersion,l(i.transaction),a)}),t&&i.addEventListener("blocked",a=>t(a.oldVersion,a.newVersion,a)),u.then(a=>{o&&a.addEventListener("close",()=>o()),n&&a.addEventListener("versionchange",c=>n(c.oldVersion,c.newVersion,c))}).catch(()=>{}),u}function F(s,{blocked:e}={}){let t=indexedDB.deleteDatabase(s);return e&&t.addEventListener("blocked",r=>e(r.oldVersion,r)),l(t).then(()=>{})}var T=["get","getKey","getAll","getAllKeys","count"],q=["put","add","delete","clear"],b=new Map;function D(s,e){if(!(s instanceof IDBDatabase&&!(e in s)&&typeof e=="string"))return;if(b.get(e))return b.get(e);let t=e.replace(/FromIndex$/,""),r=e!==t,n=q.includes(t);if(!(t in(r?IDBIndex:IDBObjectStore).prototype)||!(n||T.includes(t)))return;let o=async function(i,...u){let a=this.transaction(i,n?"readwrite":"readonly"),c=a.store;return r&&(c=c.index(u.shift())),(await Promise.all([c[t](...u),n&&a.done]))[0]};return b.set(e,o),o}C(s=>({...s,get:(e,t,r)=>D(e,t)||s.get(e,t,r),has:(e,t)=>!!D(e,t)||s.has(e,t)}));var L=["continue","continuePrimaryKey","advance"],v={},B=new WeakMap,P=new WeakMap,V={get(s,e){if(!L.includes(e))return s[e];let t=v[e];return t||(t=v[e]=function(...r){B.set(this,P.get(this)[e](...r))}),t}};async function*_(...s){let e=this;if(e instanceof IDBCursor||(e=await e.openCursor(...s)),!e)return;e=e;let t=new Proxy(e,V);for(P.set(t,e),g.set(t,x(e));e;)yield t,e=await(B.get(t)||e.continue()),B.delete(t)}function E(s,e){return e===Symbol.asyncIterator&&I(s,[IDBIndex,IDBObjectStore,IDBCursor])||e==="iterate"&&I(s,[IDBIndex,IDBObjectStore])}C(s=>({...s,get(e,t,r){return E(e,t)?_:s.get(e,t,r)},has(e,t){return E(e,t)||s.has(e,t)}}));var w="RaiseNotificationFromJS",m=class{instances=[];_dbManagerRef;_sendNotifications=!1;constructor(e){this._dbManagerRef=e.dotNetReference,this._sendNotifications=e.sendNotificationsFromJS}async openDb(e){let t=[],r=this.getInstance(e.name);try{if(!r||r.instance.version<e.version){r&&(r.instance.close(),this.instances.splice(this.instances.indexOf(r),1));let n=await $(e.name,e.version,{upgrade:async(o,i,u,a)=>{let c=this.upgradeDatabase(o,e,i,u,a);await a.done,t.push(...c)},blocked:async(o,i,u)=>{let a=`Database upgrade blocked. Current version: ${o}, Blocked version: ${i}`;console.warn(a,u),t.push(this.getFailureResult(a,{databaseName:e.name,storeName:""},"DatabaseUpgradeBlocked"))},blocking:async(o,i,u)=>{let a=`Database upgrade blocking. Current version: ${o}, Blocked version: ${i}, trying to close db.`;console.warn(a,u);try{this.getInstance(e.name)?.instance.close();let d={databaseName:e.name,storeName:""};t.push(this.getSuccessResult(a,void 0,d,"DatabaseUpgradeBlocking"))}catch(c){let d=`Could not close db, will try again. ${c}`;console.error(d),t.push(this.getFailureResult(d,{databaseName:e.name,storeName:""},"DatabaseUpgradeBlocking"))}}});r={name:e.name,instance:n,executingCursors:[]},this.instances.push(r)}}catch(n){return t.push(this.getFailureResult(`Could not open db ${n}`,{databaseName:e.name,storeName:""},"DatabaseOpenError")),t}try{let n=await this.verifySchema(r.instance,e);t.push(...n)}catch(n){t.push(this.getFailureResult(`Could not verify schema ${n}`,{databaseName:e.name,storeName:""},"SchemaVerificationError"))}return t.some(n=>!n.success)||t.push(this.getSuccessResult(`Database ${e.name} opened`,void 0,{databaseName:e.name,storeName:""},"DatabaseOpened")),t}async deleteDb(e){try{let t=this.getInstance(e);if(!t)return this.getFailureResult(`Database ${e} not found. Is it open?`,{databaseName:e,storeName:""},"InstanceNotFound");t.instance.close(),await F(e),this.instances.splice(this.instances.indexOf(t),1);let r=`The database ${e} has been deleted.`;return this.getSuccessResult(r,void 0,{databaseName:e,storeName:""},"DatabaseDeleted")}catch(t){return this.getFailureResult(`Error deleting database: ${t}`,{databaseName:e,storeName:""},"DatabaseDeleteError")}}async getDatabaseInfo(e){try{let t=this.getInstance(e);if(!t)return this.getFailureResult(`Database ${e} not found. Is it open?`,{databaseName:e,storeName:""},"InstanceNotFound");let r=t.instance,n={name:r.name,version:r.version,storeNames:this.getStoreNames(r.objectStoreNames)};return this.getSuccessResult("Database information retrieved",n,{databaseName:r.name,storeName:""},"DatabaseInfo")}catch(t){return this.getFailureResult(`Error getting database information: ${t}`,{databaseName:e,storeName:""},"DatabaseInfoError")}}async addRecord(e){let t=e.data;try{let{tx:r,objectStore:n,idbKeyResult:o}=this.getStoreQuery(e,"readwrite");if(t=this.removePrimaryKeyPropertyIfAutoIncrement(n,t),!n.add)return this.getFailureResult("Add method not available on object store",e,"RecordQueryError");let i;if(!o.success&&e.useKey)return this.getFailureResult("Unable to update record, key not valid",e,"RecordQueryError");o.success&&e.useKey&&(i=o.result.data.value);let u=await n.add(t,i),a=await n.get(u);await r.done;let c=`Added new record with id ${u}`;return this.getSuccessResult(c,a,e,"Record")}catch(r){return this.getFailureResult(`Error adding record: ${r}`,e,"RecordQueryError")}}async updateRecord(e){try{let{tx:t,idbKeyResult:r,objectStore:n}=this.getStoreQuery(e,"readwrite");if(!n.put)return this.getFailureResult("Put method not available on object store",e,"RecordQueryError");let o;if(!r.success&&e.useKey)return this.getFailureResult("Unable to update record, key not valid",e,"RecordQueryError");r.success&&e.useKey&&(o=r.result.data.value);let i=await n.put(e.data,o),u=await n.get(i);await t.done;let a=`Updated record with id ${i}`;return this.getSuccessResult(a,u,e,"Record")}catch(t){return this.getFailureResult(`Error updating record: ${t}`,e,"RecordQueryError")}}async deleteRecord(e){try{let{tx:t,objectStore:r,idbKeyResult:n}=this.getStoreQuery(e,"readwrite");return r.delete?n.success?n.result.data.type==="NoQuery"?this.getFailureResult("Error deleting record: NoQuery is not a valid query",e,"RecordQueryError"):(await r.delete(n.result.data.value),await t.done,this.getSuccessResult(`Deleted records from store ${e.storeName}`,void 0,e,"RecordDeleted")):this.getFailureResult(`Error deleting record: ${n.message}`,e,"RecordQueryError"):this.getFailureResult("delete method not available on object store",e,"RecordQueryError")}catch(t){return this.getFailureResult(`Error deleting record: ${t}`,e,"RecordQueryError")}}async clearStore(e){try{let{tx:t,objectStore:r}=this.getTransaction(e,"readwrite");return r.clear?(await r.clear(),await t.done,this.getSuccessResult(`Store ${e.storeName} cleared`,void 0,e,"StoreCleared")):this.getFailureResult("Clear method not available on object store",e,"StoreQueryError")}catch(t){return this.getFailureResult(`Error clearing store ${e.storeName}: ${t}`,e,"StoreQueryError")}}async openCursor(e,t){try{let r=this.getQueryPath(e),{objectStore:n,tx:o,idbKeyResult:i,index:u}=this.getStoreQuery(e,"readonly");if(!i.success)return i;let a=this.getInstance(e.databaseName);if(this.getInstanceExecutingCursor(a,e))return this.getFailureResult("Another cursor is already open",e,"CursorFailure");let d=i.result.data.value,y=await(u??n).openCursor(d,t);return await o.done,y?.value?(a.executingCursors.push({initialQuery:e,cursorPosition:1,direction:t}),this.getSuccessResult(`Cursor result ${r}`,y.value,e,"CursorRecord")):this.getSuccessResult(`Cursor result ${r}`,void 0,e,"CursorClosed")}catch(r){return this.getFailureResult(`Error getting records ${r}`,e,"CursorFailure")}}async advanceCursor(e){try{let t=this.getQueryPath(e),r=this.getInstance(e.databaseName),n=this.getInstanceExecutingCursor(r,e);if(n){let{objectStore:o,tx:i,idbKeyResult:u,index:a}=this.getStoreQuery(n.initialQuery,"readonly");if(!u.success)return u;let c=u.result.data.value,y=await(await(a??o).openCursor(c,n.direction))?.advance(n.cursorPosition);return await i.done,!y||!y.value?(r.executingCursors.splice(r.executingCursors.indexOf(n),1),this.getSuccessResult(`No more records ${t}`,void 0,e,"CursorClosed")):(n.cursorPosition+=1,this.getSuccessResult(`Cursor record ${t}`,y.value,e,"CursorRecord"))}return this.getSuccessResult(`No cursor is open ${t}`,void 0,e,"CursorNotOpen")}catch(t){return this.getFailureResult(`Error getting records ${t}`,e,"CursorFailure")}}async closeCursor(e){try{let t=this.getInstance(e.databaseName);if(!t)return this.getFailureResult(`Database ${e.databaseName} not found. Is it open?`,e,"InstanceNotFound");let r=this.getInstanceExecutingCursor(t,e);return r?(t.executingCursors.splice(t.executingCursors.indexOf(r),1),this.getSuccessResult("",void 0,e,"CursorClosed")):this.getSuccessResult("No cursor is open",void 0,e,"CursorNotOpen")}catch(t){return this.getFailureResult(`Error closing cursor: ${t}`,e,"CursorFailure")}}async closeAllStoreCursors(e){try{let t=this.getInstance(e.databaseName);return t?(t.executingCursors=t.executingCursors.filter(r=>r.initialQuery.databaseName!==e.databaseName&&r.initialQuery.storeName!==e.storeName),this.getSuccessResult("",void 0,e,"CursorNoMoreRecords")):this.getFailureResult(`Database ${e.databaseName} not found. Is it open?`,e,"InstanceNotFound")}catch(t){return this.getFailureResult(`Error closing cursor: ${t}`,e,"CursorFailure")}}async closeAllCursors(e){try{let t=this.getInstance(e.databaseName);return t?(t.executingCursors=[],this.getSuccessResult("",void 0,{databaseName:e.databaseName,storeName:""},"CursorClosed")):this.getFailureResult(`Database ${e.databaseName} not found. Is it open?`,e,"InstanceNotFound")}catch(t){return this.getFailureResult(`Error closing cursor: ${t}`,{databaseName:e.databaseName,storeName:""},"CursorFailure")}}async iterateRecords(e,t){try{let r=this.getQueryPath(e),{objectStore:n,tx:o,idbKeyResult:i,index:u}=this.getStoreQuery(e,"readonly");if(!i.success)return i;let a=[],d=(u??n).iterate(i.result.data.value,t);for await(let h of d)a.push(h.value);return await o.done,this.getSuccessResult(`${a.length} records retrieved ${r}`,a,e,a.length>0?"Record":"RecordNotFound")}catch(r){return this.getFailureResult(`Error getting records ${r}`,e,"StoreQueryError")}}async getRecord(e){try{let t=this.getQueryPath(e),{objectStore:r,tx:n,idbKeyResult:o,index:i}=this.getStoreQuery(e,"readonly");if(!o.success)return o;if(o.result.data.type==="NoQuery")return this.getFailureResult("NoQuery is not a valid query",e,"RecordQueryError");let a=await(i??r).get(o.result.data.value);return await n.done,this.getSuccessResult(`${a?"1":"0"} record retrieved ${t}`,a,e,a?"Record":"RecordNotFound")}catch(t){return this.getFailureResult(`Error getting record: ${t}`,e,"StoreQueryError")}}async getAllRecords(e,t){try{let r=this.getQueryPath(e),{objectStore:n,tx:o,idbKeyResult:i,index:u}=this.getStoreQuery(e,"readonly");if(!i.success)return i;let c=await(u??n).getAll(i.result.data.value,t>0?t:void 0);return await o.done,this.getSuccessResult(`${c.length} records retrieved from ${r}`,c,e,c.length>0?"Record":"RecordNotFound")}catch(r){return this.getFailureResult(`Error getting records: ${r}`,e,"StoreQueryError")}}async getAllKeys(e,t){try{let r=this.getQueryPath(e),{objectStore:n,tx:o,idbKeyResult:i,index:u}=this.getStoreQuery(e,"readonly");if(!i.success)return i;let c=await(u??n).getAllKeys(i.result.data.value,t>0?t:void 0);return await o.done,this.getSuccessResult(`${c.length} keys retrieved from ${r}`,c,e,c.length>0?"Record":"RecordNotFound")}catch(r){return this.getFailureResult(`Error getting keys: ${r}`,e,"StoreQueryError")}}async getKey(e){try{let t=this.getQueryPath(e),{objectStore:r,tx:n,idbKeyResult:o,index:i}=this.getStoreQuery(e,"readonly");if(!o.success)return o;if(o.result.data.type==="NoQuery")return this.getFailureResult("NoQuery is not a valid query",e,"RecordQueryError");let a=await(i??r).getKey(o.result.data.value);return await n.done,this.getSuccessResult(`${a?"1":"0"} keys retrieved from ${t}`,a,e,a?"Record":"RecordNotFound")}catch(t){return this.getFailureResult(`Error getting keys: ${t}`,e,"StoreQueryError")}}getIDBKey(e){let t,r=e.queryValue;try{switch(r.queryType){case"BoundQuery":t={type:"KeyRange",value:IDBKeyRange.bound(r.lower,r.upper,r.lowerOpen,r.upperOpen)};break;case"LowerBoundQuery":t={type:"KeyRange",value:IDBKeyRange.lowerBound(r.lowerBound,r.lowerOpen)};break;case"UpperBoundQuery":t={type:"KeyRange",value:IDBKeyRange.upperBound(r.upperBound,r.upperOpen)};break;case"OnlyQuery":t={type:"KeyRange",value:IDBKeyRange.only(r.value)};break;case"ValidKeyQuery":t={type:"ValidKey",value:r.value};break;case"NoQuery":t={type:"NoQuery",value:void 0};break;default:return this.getFailureResult(`Invalid query type ${r.queryType}`,e,"IDBKeyFailure")}}catch(n){return this.getFailureResult(`Failed to create key ${n}`,e,"IDBKeyFailure")}return this.getSuccessResult("",t,e,"IDBKeyCreated")}getStoreQuery(e,t){let{tx:r,objectStore:n}=this.getTransaction(e,t),o=this.getIDBKey(e),i=e.indexName?n.index(e.indexName):void 0;return{objectStore:n,tx:r,idbKeyResult:o,index:i}}getTransaction(e,t){let r=this.getInstance(e.databaseName);if(!r)throw new Error(`Database ${e.databaseName} not found. Is it open?`);let n=r.instance.transaction(e.storeName,t),o=n.objectStore(e.storeName);return{tx:n,objectStore:o}}removePrimaryKeyPropertyIfAutoIncrement(e,t){return!e.autoIncrement||!e.keyPath||Array.isArray(e.keyPath)||Object.hasOwn(t,e.keyPath)&&delete t[e.keyPath],t}upgradeDatabase(e,t,r,n,o){let i=[];if(r<n)for(var u of t.stores){if(!e.objectStoreNames.contains(u.name)){i.push(...this.addNewStore(e,u,r,n));continue}let a=o.objectStore(u.name);for(let c of u.indexes)a.indexNames.contains(c.name)||i.push(this.createIndexForStore(c,a,r,n))}return i}async verifySchema(e,t){let r=[];if(t.stores)for(var n of t.stores){let o={databaseName:t.name,storeName:n.name};if(!e.objectStoreNames.contains(n.name)){r.push(this.getFailureResult(`Store ${n.name} not found in database`,o,"StoreNotFound"));continue}let u=e.transaction(n.name,"readonly").objectStore(n.name);for(let a of n.indexes){if(!u.indexNames.contains(a.name)){r.push(this.getFailureResult(`Index ${a.name} not found in store ${n.name}`,o,"IndexNotFound"));continue}let c=u.index(a.name);if(Array.isArray(c.keyPath))for(let d of c.keyPath)a.keyPath.includes(d)||r.push(this.getFailureResult(`Index ${a.name} keyPath does not match. Expected: ${a.keyPath}, Actual: ${c.keyPath}`,o,"IndexKeyPathMismatch"));else a.keyPath.includes(c.keyPath)||r.push(this.getFailureResult(`Index ${a.name} keyPath does not match. Expected: ${a.keyPath}, Actual: ${c.keyPath}`,o,"IndexKeyPathMismatch"))}}return r}addNewStore(e,t,r,n){let o=[],i=t.primaryKey;i||(i={name:"id",keyPath:["id"],auto:!0,multiEntry:!1,unique:!0,keepAsArrayOnSingleValue:!1});let u=i.keyPath.length==1?i.keyPath[0]:i.keyPath;try{let c=e.createObjectStore(t.name,{keyPath:u,autoIncrement:i.auto}),d={databaseName:e.name,storeName:t.name};o.push(this.getSuccessResult(`Store ${t.name} created inside ${e.name} as it was missing when upgrading from v${r} to v${n}`,void 0,d,"StoreCreated"));for(var a of t.indexes)o.push(this.createIndexForStore(a,c,r,n))}catch(c){o.push(this.getFailureResult(`Error creating store ${t.name}: ${c}`,{databaseName:e.name,storeName:t.name},"StoreCreationError"))}return o}createIndexForStore(e,t,r,n){let o=e.keyPath;if(e.keyPath.length===1&&!e.keepAsArrayOnSingleValue&&(o=e.keyPath[0]),e.multiEntry&&e.keyPath.length>1)return this.getFailureResult(`Index ${e.name} has multiEntry set to true but has multiple keyPaths. This is not supported.`,{databaseName:t.transaction.db.name,storeName:t.name},"MultiEntryIndexWithMultipleKeyPaths");e.multiEntry&&e.keyPath.length===1&&(o=e.keyPath[0]);try{t.createIndex(e.name,o,{unique:e.unique,multiEntry:e.multiEntry})}catch(u){return this.getFailureResult(`Error creating index ${e.name} for store ${t.name}: ${u}`,{databaseName:t.transaction.db.name,storeName:t.name},"IndexCreationError")}let i=`Index ${e.name} created inside ${t.name} as it was missing when upgrading from v${r} to v${n}`;return this.getSuccessResult(i,void 0,{databaseName:"",storeName:t.name},"IndexCreated")}getSuccessResult(e,t,r,n){let o={success:!0,result:{data:t,databaseName:r.databaseName,storeName:r.storeName},message:e,type:n};return this._sendNotifications&&this._dbManagerRef.invokeMethodAsync(w,o),o}getFailureResult(e,t,r){let n={success:!1,result:{data:void 0,databaseName:t.databaseName,storeName:t.storeName},message:e,type:r};return this._sendNotifications&&this._dbManagerRef.invokeMethodAsync(w,n),n}getInstance(e){return this.instances.find(t=>t.name.toLowerCase()===e.toLowerCase())}getInstanceExecutingCursor(e,t){return e.executingCursors.find(r=>r.initialQuery.databaseName===t.databaseName&&r.initialQuery.storeName===t.storeName&&r.initialQuery.indexName===t.indexName&&JSON.stringify(r.initialQuery.queryValue)===JSON.stringify(t.queryValue))}getQueryPath(e){return`${e.databaseName}->${e.storeName}${e.indexName?`->${e.indexName}`:""}`}getStoreNames(e){let t=[];for(let r of e)t.push(r);return t}};var Q,U;function te(s){Q||(Q=new m(s),U=s.dotNetReference,console.log("IndexedDbManager initialized"))}export{Q as IDBManager,te as initIndexedDbManager};
//# sourceMappingURL=client.js.map
