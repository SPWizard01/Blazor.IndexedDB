@page "/indexed-db-index"

@using Blazor.IndexedDB.Models.JS
@using Blazor.IndexedDB.Models.Query
@using Blazor.IndexedDB.Models.Record
@using Blazor.IndexedDB.Server.Components.Shared
@using Blazor.IndexedDB.Server.Models
@using Blazor.IndexedDB.Models
@using System.Text.Json
@inject IndexedDBManager DbManager
@inject IDialogService DialogService
<div>
    <Notifications DbManager="DbManager" />
    <MudStack Row="true" Class="pa-2 ma-2" Justify="Justify.SpaceBetween">
        <DatabaseActions DbManager="DbManager" @bind-Database="SelectedDatabase" @bind-Store="SelectedStore" />
    </MudStack>
    <MudPaper Outlined="true" Class="pa-2 ma-2">
        <MudText Typo="Typo.h6">Search Records</MudText>
        <MudStack Row="true" Justify="Justify.FlexStart">
            <MudStack>
                <MudSelect T="IndexedDBIndex" Value="SelectedIndex" ValueChanged="SelectedIndexChanged" Label="Index" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                    @foreach (var index in SelectedStore?.Indexes ?? [])
                    {
                        <MudSelectItem Value="index">@index.Name</MudSelectItem>
                    }
                </MudSelect>
                <MethodSearch OnSearch="SearchForRecords" />
            </MudStack>
            <MudStack>
                <SelectedQuery @bind-QueryValue="QueryValue" />
            </MudStack>

        </MudStack>
    </MudPaper>
    @if (SelectedStore?.Name == "Employees")
    {
        <PeopleTable People="@People" DialogService="@DialogService" DbManager="@DbManager" />
    }

    @if (SelectedStore?.Name == "Vehicles" && Vehicles.Data.Count > 0)
    {
        <VehicleTable Vehicles="@Vehicles" DialogService="@DialogService" DbManager="@DbManager" />
    }
</div>
@code {
    IIndexedDBQuery? QueryValue { get; set; }

    IndexedDBDatabase? SelectedDatabase { get; set; }
    IndexedDBStoreSchema? SelectedStore { get; set; }
    IndexedDBIndex? SelectedIndex { get; set; }
    IndexedDBRecord<List<Person>>? People { get; set; }
    IndexedDBRecord<List<Vehicle>>? Vehicles { get; set; }

    void SelectedIndexChanged(IndexedDBIndex selected)
    {
        SelectedIndex = selected;
    }


    protected async Task SearchForRecords(string selectedMethod)
    {
        if (QueryValue == null)
        {
            return;
        }
        await HelperMethods.SearchForRecords(DbManager, selectedMethod, SelectedDatabase?.Name, SelectedStore?.Name, SelectedIndex?.Name ?? "", QueryValue);
    }
}
