@page "/indexed-db"

@using Blazor.IndexedDB.Models.Query
@using Blazor.IndexedDB.Server.Models
@using Blazor.IndexedDB.Models
@implements IDisposable
@inject IndexedDBManager DbManager
@inject DbStore DbStore

<MudStack Row="true">
    <MudPaper Class="pa-2 ma-2">Status: </MudPaper>
    <MudPaper Class="pa-2 ma-2">@Message</MudPaper>
</MudStack>
<MudStack Row="true">
    <MudPaper Class="pa-2 ma-2">DB Version: </MudPaper>
    <MudPaper Class="pa-2 ma-2">@DbManager.CurrentVersion</MudPaper>

</MudStack>
<MudStack Row="true">
    <MudPaper Class="pa-2 ma-2">Stores: </MudPaper>
    <MudPaper Class="pa-2 ma-2">@string.Join(", ", DbManager.Stores.Select(s => s.Name))</MudPaper>
</MudStack>
<MudStack Row="true" Class="pa-2 ma-2">
    <MudButton OnClick="OpenDatabaseAsync" Variant="Variant.Outlined">Open Database</MudButton>
    <MudButton OnClick="GetRecords" Variant="Variant.Outlined">Get Records</MudButton>
    <MudButton OnClick="ClearStore" Variant="Variant.Outlined">Clear Store</MudButton>
    <MudButton OnClick="DeleteDatabase" Variant="Variant.Outlined">Delete Database</MudButton>
</MudStack>
<MudPaper Outlined="true" Class="pa-2 ma-2">
    <MudText Typo="Typo.h6">Search Records</MudText>
    <MudStack Row="true" Justify="Justify.FlexStart">
        <MudStack>
            <MudSwitch Color="Color.Primary" Value="true">Primary Key Search</MudSwitch>
            <MudSwitch Color="Color.Primary" Value="false">Return All</MudSwitch>

            <MudSelect T="string" Label="Index" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                @foreach (var index in Indexes)
                {
                    <MudSelectItem Value="index" />
                }
            </MudSelect>
            <MudButton Color="Color.Primary" Variant="Variant.Outlined" OnClick="SearchForRecords">Search</MudButton>
        </MudStack>
        <MudStack>
            <MudRadioGroup Value="false">
                <MudStack Row="true">
                    <MudStack>
                        <MudText>Simple Query</MudText>
                        <MudPaper Outlined="true" Class="pa-1">
                            <MudRadio Value="true" Color="Color.Primary" Dense="true" Placement="Placement.Bottom" Class="ml-0">
                                <MudStack>
                                    <MudTextField Label="Search String" Variant="Variant.Outlined" @bind-Value="SearchString" />
                                </MudStack>
                            </MudRadio>
                        </MudPaper>
                    </MudStack>
                    <MudStack>
                        <MudText>Bound Query</MudText>
                        <MudPaper Outlined="true" Class="pa-1">
                            <MudRadio Value="true" Color="Color.Primary" Dense="true" Placement="Placement.Bottom" Class="ml-0">
                                <MudStack>
                                    <MudTextField Label="Lower" Variant="Variant.Outlined" @bind-Value="SearchString" />
                                    <MudTextField Label="Upper" Variant="Variant.Outlined" @bind-Value="SearchString" />
                                    <MudSwitch Color="Color.Primary" Value="false">Exclude Lower</MudSwitch>
                                    <MudSwitch Color="Color.Primary" Value="false">Exclude Upper</MudSwitch>
                                </MudStack>
                            </MudRadio>
                        </MudPaper>
                    </MudStack>
                    <MudStack>
                        <MudText>Lower Bound Query</MudText>
                        <MudPaper Outlined="true" Class="pa-1">
                            <MudRadio Value="true" Color="Color.Primary" Dense="true" Placement="Placement.Bottom" Class="ml-0">
                                <MudStack>
                                    <MudTextField Label="Lower" Variant="Variant.Outlined" @bind-Value="SearchString" />
                                    <MudSwitch Color="Color.Primary" Value="false">Exclude Lower</MudSwitch>
                                </MudStack>
                            </MudRadio>
                        </MudPaper>
                    </MudStack>
                    <MudStack>
                        <MudText>Upper Bound Query</MudText>
                        <MudPaper Outlined="true" Class="pa-1">
                            <MudRadio Value="true" Color="Color.Primary" Dense="true" Placement="Placement.Bottom" Class="ml-0">
                                <MudStack>
                                    <MudTextField Label="Upper" Variant="Variant.Outlined" @bind-Value="SearchString" />
                                    <MudSwitch Color="Color.Primary" Value="false">Exclude Upper</MudSwitch>
                                </MudStack>
                            </MudRadio>
                        </MudPaper>
                    </MudStack>
                    <MudStack>
                        <MudText>Only Query</MudText>
                        <MudPaper Outlined="true" Class="pa-1">
                            <MudRadio Value="true" Color="Color.Primary" Dense="true" Placement="Placement.Bottom" Class="ml-0">
                                <MudStack>
                                    <MudTextField Label="Search String" Variant="Variant.Outlined" @bind-Value="SearchString" />
                                </MudStack>
                            </MudRadio>
                        </MudPaper>
                    </MudStack>
                </MudStack>
            </MudRadioGroup>

        </MudStack>

    </MudStack>
</MudPaper>
<div class="d-flex flex-row align-items-start">
    <div class="d-flex flex-column">


        <div class="m-4 d-flex flex-row">
            <button class="btn btn-outline-primary mr-2" @onclick="AddNewStore">Add New Store</button>
            <input type="text" placeholder="Enter new store name" @bind="NewStoreName" />
        </div>

    </div>

    <div class="d-flex, flex-column">
        <div class="m-4 border d-flex flex-column">
            <div class="m-4">
                <label>First Name</label> <input id="firstName" type="text" @bind="@CurrentPerson.FirstName" />
            </div>
            <div class="m-4">
                <label>Last Name</label> <input id="lastName" type="text" @bind="@CurrentPerson.LastName" />
            </div>

            <button class="btn btn-primary m-4" @onclick="AddRecord">Add/Update Record</button>
        </div>
    </div>

    <div class="d-flex flex-row flex-wrap mt-4">

        @foreach (var person in People)
        {

            <div class="card" style="margin-bottom:10px; margin-right: 10px; padding:5px; width:200px">
                <p>Id: @person.Id</p>
                <p>First Name: @person.FirstName</p>
                <p>Last Name: @person.LastName</p>
                <div>
                    <button class="btn btn-outline-primary" @onclick="(() => EditPerson(person.Id))">Edit</button>
                    <button class="btn btn-outline-warning" @onclick="(() => DeleteRecord(person.Id))">Delete</button>
                </div>
            </div>

        }

    </div>
</div>

@code {
    string Message { get; set; } = string.Empty;
    Person CurrentPerson { get; set; } = new Person();
    List<Person> People { get; set; } = new();
    string NewStoreName { get; set; } = "";
    List<string> Indexes { get; set; } = new();
    string SelectedIndex { get; set; } = string.Empty;
    string SearchString { get; set; } = string.Empty;
    bool GetAll { get; set; }

    protected override void OnInitialized()
    {
        DbManager.ActionCompleted += OnIndexedDbNotification;
        Indexes = DbManager.Stores[0].Indexes.Select(id => id.Name).ToList();

    }

    public void Dispose()
    {
        DbManager.ActionCompleted -= OnIndexedDbNotification;
    }

    protected async Task OpenDatabaseAsync()
    {
        await DbManager.OpenDb();
        await DbManager.GetCurrentDbState();
        StateHasChanged();
    }

    protected List<string>
    GetIndexes()
    {
        return DbManager.Stores[0].Indexes.Select(idx => idx.Name).ToList();
    }

    protected async void GetRecords()
    {
        var results = await DbManager.GetAllRecords<Person>(new(DbManager.Stores[0].Name, "", IndexedDBQuery.ValidKeyQuery("")));

        if (results != null && results.Data != null && results.Data.Any())
        {
            People = results.Data.ToList();
        }
        else
        {
            People.Clear();
            Message = "No Records found";
        }

        StateHasChanged();
    }

    protected async Task EditPerson(long? id)
    {
        try
        {
            if (id is null)
            {
                return;
            }
            var resultById = await DbManager.GetRecordById<long, Person>
               (DbManager.Stores[0].Name, id.Value);
            if (resultById is not null && resultById.Data is not null)
                CurrentPerson = resultById.Data;
        }
        catch (Exception e)
        {

            Console.WriteLine(e.Message);
        }
    }

    protected async void AddRecord()
    {
        var newRecord = new StoreRecord<Person>
            {
                StoreName = DbManager.Stores[0].Name,
                Data = CurrentPerson
            };


        if (newRecord.Data.Id.HasValue)
        {
            await DbManager.UpdateRecord(newRecord);
        }
        else
        {

            var result = await DbManager.AddRecord(newRecord);
            if (result is not null && result.Data != null)
                People.Add(result.Data);
        }



        CurrentPerson = new Person();

        // GetRecords();
    }

    protected async Task DeleteRecord(long? id)
    {
        await DbManager.DeleteRecord(DbManager.Stores[0].Name, id);

        GetRecords();
    }

    protected async Task AddNewStore()
    {
        var newStoreSchema = new StoreSchema
            {
                Name = NewStoreName,
                PrimaryKey = new IndexSpec { Name = "id", KeyPath = ["id"], Auto = true },
            };

        await DbManager.AddNewStore(newStoreSchema);
        await DbManager.GetCurrentDbState();
    }

    protected async Task ClearStore()
    {
        await DbManager.ClearStore(DbManager.Stores[0].Name);
        GetRecords();
    }

    protected async Task DeleteDatabase()
    {
        await DbManager.DeleteDb(DbStore.DbName);
        People.Clear();
    }

    private void OnIndexedDbNotification(object? sender, IndexedDBNotificationEvent args)
    {
        Message = args.Message;
    }
    protected async Task SearchForRecords()
    {

        if (string.IsNullOrEmpty(SelectedIndex))
        {
            return;
        }

        People.Clear();

        var indexSearch = new IndexedDBSearch(DbManager.Stores[0].Name, SelectedIndex, IndexedDBQuery.ValidKeyQuery(SearchString));

        if (GetAll)
        {
            var result = await DbManager.GetAllRecordsByIndex<Person>(indexSearch);

            if (result is null)
            {
                return;
            }
            People.AddRange(result.Data ?? []);

        }
        else
        {
            var result = await DbManager.GetRecordByIndex<string, Person>(indexSearch);

            if (result is null || result.Data is null)
            {
                return;
            }
            People.Add(result.Data);
        }
    }
}
