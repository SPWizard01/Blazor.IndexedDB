@using Blazor.IndexedDB.Models
<MudSelect Class="flex-grow-0" T="IndexedDBDatabase" Value="Database" ValueChanged="OnDatabaseSelected" Label="Database" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
    @foreach (var db in DbManager.ManagerConfig.Databases)
    {
        <MudSelectItem Value="db">@db.Name</MudSelectItem>
    }
</MudSelect>
<MudSelect Class="flex-grow-0" Disabled="Database==null" T="IndexedDBStoreSchema" Value="Store" ValueChanged="OnDatabaseStoreSelected" Label="Store(Table)" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
    @foreach (var store in Database?.Stores ?? [])
    {
        <MudSelectItem Value="store">@store.Name</MudSelectItem>
    }
</MudSelect>
<MudButton OnClick="OpenDatabaseAsync" Variant="Variant.Outlined">Open Database</MudButton>
@code {
    [Parameter]
    public required IndexedDBManager DbManager { get; set; }

    [Parameter]
    public IndexedDBDatabase? Database { get; set; }

    [Parameter]
    public EventCallback<IndexedDBDatabase>? DatabaseChanged { get; set; }

    [Parameter]
    public IndexedDBStoreSchema? Store { get; set; }

    [Parameter]
    public EventCallback<IndexedDBStoreSchema>? StoreChanged { get; set; }




    protected async Task OpenDatabaseAsync()
    {
        if (Database == null)
        {
            return;
        }
        await DbManager.OpenDb(Database);
    }

    private void OnDatabaseSelected(IndexedDBDatabase db)
    {
        Database = db;
        DatabaseChanged?.InvokeAsync(db);
    }

    private void OnDatabaseStoreSelected(IndexedDBStoreSchema dbstore)
    {
        Store = dbstore;
        StoreChanged?.InvokeAsync(dbstore);
    }

}
